package com.capgemini.librarymanagementsystemjdbc.dao;

import java.io.FileInputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.LinkedList;
import java.util.Properties;

import com.capgemini.librarymanagementsystemjdbc.dto.BookBean;
import com.capgemini.librarymanagementsystemjdbc.dto.UsersBean;
import com.capgemini.librarymanagementsystemjdbc.exception.LMSException;

public class UsersDAOImplement implements UsersDAO {

	public boolean register(UsersBean user) {

		try (FileInputStream fin = new FileInputStream("db.properties")) {

			Properties pro = new Properties();
			pro.load(fin);

			Class.forName("com.mysql.jdbc.Driver").newInstance();
			String dburl = "jdbc:mysql://localhost:3306/library_management_system";
			try (Connection conn = DriverManager.getConnection(dburl, "root", "root")) {
				String query = "insert into users values(?,?,?,?,?,?,?)";
				try (PreparedStatement pstmt = conn.prepareStatement(query);) {
					pstmt.setInt(1,user.getuId());
					pstmt.setString(2, user.getFirstName());
					pstmt.setString(3, user.getLastName());
					pstmt.setString(4, user.getEmail());
					pstmt.setString(5, user.getPassword());
					pstmt.setString(6, user.getMobile());
					pstmt.setString(7, user.getRole());
					int count = pstmt.executeUpdate();
					if(user.getEmail().isEmpty() && count==0) {
						return false;
					} else {
						return true;
					}
				}
			}
		}catch(Exception e) {
			e.printStackTrace();
			return false;
		}
	}

	public UsersBean login(String email, String password) {
		try (FileInputStream fin = new FileInputStream("db.properties")) {

			Properties pro = new Properties();
			pro.load(fin);

			Class.forName(pro.getProperty("path")).newInstance();
			try (Connection conn = DriverManager.getConnection(pro.getProperty("dburl"), pro)) {
				String query = pro.getProperty("login");
				try (PreparedStatement pstmt = conn.prepareStatement(query);) {
					pstmt.setString(1, email);
					pstmt.setString(2, password);

					LinkedList<UsersBean> list = new LinkedList<UsersBean>();
					for(UsersBean bean : list) {
						if(bean.getEmail().equals(email) && bean.getPassword().equals(password)) {
							ResultSet set = pstmt.executeQuery(); 
							return bean;
						} 
					} throw new LMSException("Invalid EmailId and Password");
				}
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;

	}

	@Override
	public boolean addBook(BookBean book) {

		try (FileInputStream fin = new FileInputStream("db.properties")) {

			Properties pro = new Properties();
			pro.load(fin);

			Class.forName("com.mysql.jdbc.Driver").newInstance();
			String dburl = "jdbc:mysql://localhost:3306/library_management_system";
			try (Connection conn = DriverManager.getConnection(dburl, "root", "root")) {
				String query = "insert into bookbean values(?,?,?,?,?)";
				try (PreparedStatement pstmt = conn.prepareStatement(query);) {
					pstmt.setString(1,book.getBookName());
					pstmt.setInt(2,book.getbId());
					int count=pstmt.executeUpdate();
					if(count!=0) {
						return true;
					} else {
						return false;
					}
				}
			}

		} catch(Exception e) {
			e.printStackTrace();
			return false;
		}

	}

	@Override
	public boolean updateBook(BookBean book) {
		try (FileInputStream fin = new FileInputStream("db.properties")) {

			Properties pro = new Properties();
			pro.load(fin);

			Class.forName("com.mysql.jdbc.Driver").newInstance();
			String dburl = "jdbc:mysql://localhost:3306/library_management_system";
			try (Connection conn = DriverManager.getConnection(dburl, "root", "root")) {
				String query = "update bookbean set bookname=? where bid=?";
				try (PreparedStatement pstmt = conn.prepareStatement(query);) {
					pstmt.setInt(1, book.getbId());
					pstmt.setString(2, book.getBookName());
					pstmt.setString(3, book.getAuthor());
					pstmt.setString(4, book.getCategory());
					pstmt.setString(5, book.getPublisher());
					int count = pstmt.executeUpdate();
					if(count!=0) {
						return true;
					} else {
						return false;
					}
				}
			}

		} catch(Exception e) {
			e.printStackTrace();
			return false;
		}

	}

	@Override
	public LinkedList<BookBean> searchBookById(int bId) {
		try (FileInputStream fin = new FileInputStream("db.properties")) {

			Properties pro = new Properties();
			pro.load(fin);

			Class.forName("com.mysql.jdbc.Driver").newInstance();
			String dburl = "jdbc:mysql://localhost:3306/library_management_system";
			try (Connection conn = DriverManager.getConnection(dburl, "root", "root")) {
				String query = "select * from bookbean where bookid=?";
				try (PreparedStatement pstmt = conn.prepareStatement(query);) {
					pstmt.setInt(1,bId);
					try	(ResultSet rs=pstmt.executeQuery();) {
						LinkedList<BookBean> beans = new LinkedList<BookBean>();
						while(rs.next()) {
							BookBean bean = new BookBean();
							bean.setbId(rs.getInt("bId"));
							bean.setBookName(rs.getString("bookName"));
							bean.setAuthor(rs.getString("author"));
							bean.setCategory(rs.getString("category"));
							bean.setPublisher(rs.getString("publisher"));
							beans.add(bean);
						}
						return beans;
					}
				}
			}
		} catch(Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public LinkedList<BookBean> searchBookByTitle(String bookName) {
		try (FileInputStream fin = new FileInputStream("db.properties")) {

			Properties pro = new Properties();
			pro.load(fin);

			Class.forName("com.mysql.jdbc.Driver").newInstance();
			String dburl = "jdbc:mysql://localhost:3306/library_management_system";
			try (Connection conn = DriverManager.getConnection(dburl, "root", "root")) {
				String query = "select * from bookbean where bookname=?";
				try (PreparedStatement pstmt = conn.prepareStatement(query);) {
					pstmt.setString(1,bookName);
					try	(ResultSet rs=pstmt.executeQuery();) {
						LinkedList<BookBean> beans = new LinkedList<BookBean>();
						while(rs.next()) {
							BookBean bean = new BookBean();
							bean.setbId(rs.getInt("bId"));
							bean.setBookName(rs.getString("bookName"));
							bean.setAuthor(rs.getString("author"));
							bean.setCategory(rs.getString("category"));
							bean.setPublisher(rs.getString("publisher"));
							beans.add(bean);
						}
						return beans;
					}
				}
			}
		} catch(Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public LinkedList<BookBean> searchBookByAuthor(String author) {
		try (FileInputStream fin = new FileInputStream("db.properties")) {

			Properties pro = new Properties();
			pro.load(fin);

			Class.forName("com.mysql.jdbc.Driver").newInstance();
			String dburl = "jdbc:mysql://localhost:3306/library_management_system";
			try (Connection conn = DriverManager.getConnection(dburl, "root", "root")) {
				String query = "select * from bookbean where author=?";
				try (PreparedStatement pstmt = conn.prepareStatement(query);) {
					pstmt.setString(1,author);
					try	(ResultSet rs=pstmt.executeQuery();) {
						LinkedList<BookBean> beans = new LinkedList<BookBean>();
						while(rs.next()) {
							BookBean bean = new BookBean();
							bean.setbId(rs.getInt("bId"));
							bean.setBookName(rs.getString("bookName"));
							bean.setAuthor(rs.getString("author"));
							bean.setCategory(rs.getString("category"));
							bean.setPublisher(rs.getString("publisher"));
							beans.add(bean);
						}
						return beans;
					}
				}
			}
		} catch(Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public LinkedList<BookBean> getBooksInfo() {
		try (FileInputStream fin = new FileInputStream("db.properties")) {

			Properties pro = new Properties();
			pro.load(fin);

			Class.forName("com.mysql.jdbc.Driver").newInstance();
			String dburl = "jdbc:mysql://localhost:3306/library_management_system";
			try (Connection conn = DriverManager.getConnection(dburl, "root", "root")) {
				String query = "select * from bookbean";
				try (Statement stmt = conn.createStatement();) {

					try	(ResultSet rs=stmt.executeQuery(query);) {
						LinkedList<BookBean> beans = new LinkedList<BookBean>();
						while(rs.next()) {
							BookBean bean = new BookBean();
							bean.setbId(rs.getInt("bId"));
							bean.setBookName(rs.getString("bookName"));
							bean.setAuthor(rs.getString("author"));
							bean.setCategory(rs.getString("category"));
							bean.setPublisher(rs.getString("publisher"));

							beans.add(bean);
						}
						return beans;
					}
				}
			}
		} catch(Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public boolean request(int bId, String author) {
		try (FileInputStream fin = new FileInputStream("db.properties")) {

			Properties pro = new Properties();
			pro.load(fin);

			Class.forName("com.mysql.jdbc.Driver").newInstance();
			String dburl = "jdbc:mysql://localhost:3306/library_management_system";
			try (Connection conn = DriverManager.getConnection(dburl, "root", "root")) {
				String query = "select * from bookbean where bid=? and author=?";
				try (PreparedStatement pstmt = conn.prepareStatement(query, bId);) {
					pstmt.setInt(1,bId);
					pstmt.setString(2,author);
					try	(ResultSet rs=pstmt.executeQuery();) {
						if(rs.next()) {
							return true;
						} else {
							return false;
						}
					}
				}
			}
		} catch(Exception e) {
			e.printStackTrace();
			return false;
		}
	}

	@Override
	public boolean issueBook(int bId, int uId) {
		try (FileInputStream fin = new FileInputStream("db.properties")) {

			Properties pro = new Properties();
			pro.load(fin);

			Class.forName("com.mysql.jdbc.Driver").newInstance();
			String dburl = "jdbc:mysql://localhost:3306/library_management_system";
			try (Connection conn = DriverManager.getConnection(dburl, "root", "root")) {
				String query = "insert into book_issue_details values(?,?,?,?)";
				try (PreparedStatement pstmt = conn.prepareStatement(query);) {
					pstmt.setInt(1, bId);
					pstmt.setInt(2, uId);
					SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd"); 
					Calendar cal = Calendar.getInstance();
					pstmt.setDate(3, java.sql.Date.valueOf(sdf.format(cal.getTime())));
					cal.add(Calendar.DAY_OF_MONTH, 7);
					String newDate = sdf.format(cal.getTime());
					pstmt.setDate(4, java.sql.Date.valueOf(newDate));
					int count=pstmt.executeUpdate();
					if(count != 0) {			 
						return true;
					} else {
						return false;
					}
				}
			}
		}catch(Exception e) {
			e.printStackTrace();
			return false;
		}
	}

	@Override
	public BookBean borrowBook(int bId) {
		try (FileInputStream fin = new FileInputStream("db.properties")) {

			Properties pro = new Properties();
			pro.load(fin);

			Class.forName("com.mysql.jdbc.Driver").newInstance();
			String dburl = "jdbc:mysql://localhost:3306/library_management_system";
			try (Connection conn = DriverManager.getConnection(dburl, "root", "root")) {
				String query = "select * from bookbean where bid=?";
				try (Statement stmt = conn.createStatement();) {

					try	(ResultSet rs=stmt.executeQuery(query);) {

						if(rs.next()) {
							BookBean bean = new BookBean();
							bean.setbId(rs.getInt("bId"));
							bean.setBookName(rs.getString("bookName"));
							bean.setAuthor(rs.getString("author"));
							bean.setCategory(rs.getString("category"));
							bean.setPublisher(rs.getString("publisher"));
							//bean.setCopies(rs.getInt("copies"));
							return bean;
						} else {
							return null;
						}
					}
				}
			}
		} catch(Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public boolean returnBook(int bId) {
		try (FileInputStream fin = new FileInputStream("db.properties")) {

			Properties pro = new Properties();
			pro.load(fin);

			Class.forName("com.mysql.jdbc.Driver").newInstance();
			String dburl = "jdbc:mysql://localhost:3306/library_management_system";
			try (Connection conn = DriverManager.getConnection(dburl, "root", "root")) {
				String query = "select * from bookbean where bid=?";
				try (PreparedStatement pstmt = conn.prepareStatement(query);) {
					pstmt.setInt(1,bId);
					try	(ResultSet rs=pstmt.executeQuery(query);) {
						if(rs.next()) {
							return true;
						} else {
							return false;
						}
					}
				}
			}

		} catch(Exception e) {
			e.printStackTrace();
			return false;
		}
	}



	@Override
	public boolean removeBook(int bId) {
		try (FileInputStream fin = new FileInputStream("db.properties")) {

			Properties pro = new Properties();
			pro.load(fin);

			Class.forName("com.mysql.jdbc.Driver").newInstance();
			String dburl = "jdbc:mysql://localhost:3306/library_management_system";
			try (Connection conn = DriverManager.getConnection(dburl, "root", "root")) {
				String query = "delete from bookbean where bid=?";
				try (PreparedStatement pstmt = conn.prepareStatement(query);) {
					pstmt.setInt(1,bId);
					int count=pstmt.executeUpdate();
					if(count!=0) {
						return true;
					} else {
						return false;
					}
				}
			}

		} catch(Exception e) {
			e.printStackTrace();
			return false;
		}
	}

}
