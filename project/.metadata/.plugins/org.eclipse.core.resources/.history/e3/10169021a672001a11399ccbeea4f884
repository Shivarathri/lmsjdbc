package com.capgemini.librarymanagementsystemjdbc.dao;

import java.io.FileInputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.LinkedList;
import java.util.List;
import java.util.Properties;

import com.capgemini.librarymanagementsystemjdbc.dto.BookBean;
import com.capgemini.librarymanagementsystemjdbc.dto.BookIssueDetails;
import com.capgemini.librarymanagementsystemjdbc.dto.UsersBean;
import com.capgemini.librarymanagementsystemjdbc.exception.LMSException;

public class UsersDAOImplement implements UsersDAO {
	Connection conn = null;
	PreparedStatement pstmt = null;
	ResultSet rs = null;
	Statement stmt = null;

	public boolean register(UsersBean user) {

		/*
		 * try (FileInputStream fin = new FileInputStream("db.properties")) {
		 * 
		 * Properties pro = new Properties(); pro.load(fin);
		 * 
		 * Class.forName("com.mysql.jdbc.Driver").newInstance(); String dburl =
		 * "jdbc:mysql://localhost:3306/library_management_system"; try (Connection conn
		 * = DriverManager.getConnection(dburl, "root", "root")) { String query =
		 * "insert into users values(?,?,?,?,?,?,?)"; try (PreparedStatement pstmt =
		 * conn.prepareStatement(query);) { pstmt.setInt(1, user.getuId());
		 * pstmt.setString(2, user.getFirstName()); pstmt.setString(3,
		 * user.getLastName()); pstmt.setString(4, user.getEmail()); pstmt.setString(5,
		 * user.getPassword()); pstmt.setString(6, user.getMobile()); //
		 * pstmt.setString(7, user.getBookBorrowed()); pstmt.setString(7,
		 * user.getRole()); int count = pstmt.executeUpdate(); if
		 * (user.getEmail().isEmpty() && count == 0) { return false; } else { return
		 * true; } } } } catch (Exception e) { e.printStackTrace(); return false; }
		 */
		try(FileInputStream info = new FileInputStream("db.properties");){
			Properties pro = new Properties();
			pro.load(info);
			try(Connection conn = DriverManager.getConnection(pro.getProperty("dburl"),pro);){
				try(PreparedStatement pstmt = conn.prepareStatement("insert into users values(?,?,?,?,?,?,?)");){
					Class.forName(pro.getProperty("path"));
					pstmt.setInt(1,user.getuId());
					pstmt.setString(2, user.getFirstName());
					pstmt.setString(3, user.getLastName());
					pstmt.setString(4, user.getEmail());
					pstmt.setString(5, user.getPassword());
					pstmt.setString(6, user.getMobile());
					pstmt.setString(7, user.getRole());
					int count = pstmt.executeUpdate();
					if(user.getEmail().isEmpty() && count==0) {
						return false;
					} else {
						return true;
					}
				}}
		}catch(Exception e) {
			e.printStackTrace();
			return false;
		}
	}

	public UsersBean login(String email, String password) {
		try(FileInputStream info = new FileInputStream("db.properties");){
			Properties pro = new Properties();
			pro.load(info);
			try(Connection conn = DriverManager.getConnection(pro.getProperty("dburl"),pro);) {
				try (PreparedStatement pstmt = conn.prepareStatement("select * from users where email=? and password=?");) {
					Class.forName(pro.getProperty("path"));

					pstmt.setString(1, email);
					pstmt.setString(2, password);

					try (ResultSet rs = pstmt.executeQuery();) {
						if (rs.next()) {
							UsersBean bean = new UsersBean();
							bean.setuId(rs.getInt("uId"));
							bean.setFirstName(rs.getString("firstName"));
							bean.setLastName(rs.getString("lastName"));
							bean.setEmail(rs.getString("email"));
							bean.setPassword(rs.getString("password"));
							bean.setMobile(rs.getString("mobile"));
							bean.setRole(rs.getString("role"));
							return bean;
						} else {
							return null;
						}

						// throw new LMSException("Invalid EmailId and Password");
					}
				}
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;

	}

	@Override
	public boolean addBook(BookBean book) {

		try(FileInputStream info = new FileInputStream("db.properties");){
			Properties pro = new Properties();
			pro.load(info);
			try(Connection conn = DriverManager.getConnection(pro.getProperty("dburl"),pro);) {
				try	(PreparedStatement pstmt = conn.prepareStatement("insert into bookbean values(?,?,?,?,?)");) {
					Class.forName(pro.getProperty("path"));

					pstmt.setInt(1, book.getbId());
					pstmt.setString(2, book.getBookName());
					pstmt.setString(3, book.getAuthor());
					pstmt.setString(4, book.getCategory());
					pstmt.setString(5, book.getPublisher());
					int count = pstmt.executeUpdate();
					if (count != 0) {
						return true;
					} else {
						return false;
					}
				}
			}

		} catch (Exception e) {
			e.printStackTrace();
			return false;
		}

	}

	@Override
	public boolean updateBook(BookBean book) {
		try(FileInputStream info = new FileInputStream("db.properties");){
			Properties pro = new Properties();
			pro.load(info);
			try(Connection conn = DriverManager.getConnection(pro.getProperty("dburl"),pro);) {
				try (PreparedStatement pstmt = conn.prepareStatement("update bookbean set bookname=? where bid=?");) {
					Class.forName(pro.getProperty("path"));
					pstmt.setInt(1, book.getbId());
					pstmt.setString(2, book.getBookName());
					pstmt.setString(3, book.getAuthor());
					pstmt.setString(4, book.getCategory());
					pstmt.setString(5, book.getPublisher());
					int count = pstmt.executeUpdate();
					if (count != 0) {
						return true;
					} else {
						return false;
					}
				}
			}

		} catch (Exception e) {
			e.printStackTrace();
			return false;
		}

	}

	@Override
	public LinkedList<BookBean> searchBookById(int bId) {
		try (FileInputStream fin = new FileInputStream("db.properties")) {

			Properties pro = new Properties();
			pro.load(fin);

			Class.forName("com.mysql.jdbc.Driver").newInstance();
			String dburl = "jdbc:mysql://localhost:3306/library_management_system";
			try (Connection conn = DriverManager.getConnection(dburl, "root", "root")) {
				String query = "select * from bookbean where bookid=?";
				try (PreparedStatement pstmt = conn.prepareStatement(query);) {
					pstmt.setInt(1, bId);
					try (ResultSet rs = pstmt.executeQuery();) {
						LinkedList<BookBean> beans = new LinkedList<BookBean>();
						while (rs.next()) {
							BookBean bean = new BookBean();
							bean.setbId(rs.getInt("bId"));
							bean.setBookName(rs.getString("bookName"));
							bean.setAuthor(rs.getString("author"));
							bean.setCategory(rs.getString("category"));
							bean.setPublisher(rs.getString("publisher"));
							beans.add(bean);
						}
						return beans;
					}
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public LinkedList<BookBean> searchBookByTitle(String bookName) {
		try (FileInputStream fin = new FileInputStream("db.properties")) {

			Properties pro = new Properties();
			pro.load(fin);

			Class.forName("com.mysql.jdbc.Driver").newInstance();
			String dburl = "jdbc:mysql://localhost:3306/library_management_system";
			try (Connection conn = DriverManager.getConnection(dburl, "root", "root")) {
				String query = "select * from bookbean where bookname=?";
				try (PreparedStatement pstmt = conn.prepareStatement(query);) {
					pstmt.setString(1, bookName);
					try (ResultSet rs = pstmt.executeQuery();) {
						LinkedList<BookBean> beans = new LinkedList<BookBean>();
						while (rs.next()) {
							BookBean bean = new BookBean();
							bean.setbId(rs.getInt("bId"));
							bean.setBookName(rs.getString("bookName"));
							bean.setAuthor(rs.getString("author"));
							bean.setCategory(rs.getString("category"));
							bean.setPublisher(rs.getString("publisher"));
							beans.add(bean);
						}
						return beans;
					}
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public LinkedList<BookBean> searchBookByAuthor(String author) {
		try (FileInputStream fin = new FileInputStream("db.properties")) {

			Properties pro = new Properties();
			pro.load(fin);

			Class.forName("com.mysql.jdbc.Driver").newInstance();
			String dburl = "jdbc:mysql://localhost:3306/library_management_system";
			try (Connection conn = DriverManager.getConnection(dburl, "root", "root")) {
				String query = "select * from bookbean where author=?";
				try (PreparedStatement pstmt = conn.prepareStatement(query);) {
					pstmt.setString(1, author);
					try (ResultSet rs = pstmt.executeQuery();) {
						LinkedList<BookBean> beans = new LinkedList<BookBean>();
						while (rs.next()) {
							BookBean bean = new BookBean();
							bean.setbId(rs.getInt("bId"));
							bean.setBookName(rs.getString("bookName"));
							bean.setAuthor(rs.getString("author"));
							bean.setCategory(rs.getString("category"));
							bean.setPublisher(rs.getString("publisher"));
							beans.add(bean);
						}
						return beans;
					}
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public LinkedList<BookBean> getBooksInfo() {
		try (FileInputStream fin = new FileInputStream("db.properties")) {

			Properties pro = new Properties();
			pro.load(fin);

			Class.forName("com.mysql.jdbc.Driver").newInstance();
			String dburl = "jdbc:mysql://localhost:3306/library_management_system";
			try (Connection conn = DriverManager.getConnection(dburl, "root", "root")) {
				String query = "select * from bookbean";
				try (Statement stmt = conn.createStatement();) {

					try (ResultSet rs = stmt.executeQuery(query);) {
						LinkedList<BookBean> beans = new LinkedList<BookBean>();
						while (rs.next()) {
							BookBean bean = new BookBean();
							bean.setbId(rs.getInt("bId"));
							bean.setBookName(rs.getString("bookName"));
							bean.setAuthor(rs.getString("author"));
							bean.setCategory(rs.getString("category"));
							bean.setPublisher(rs.getString("publisher"));

							beans.add(bean);
						}
						return beans;
					}
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}
	@Override
	public boolean request(int bId, String author) {
		try(FileInputStream info = new FileInputStream("db.properties");){
			Properties pro = new Properties();
			pro.load(info);
			try(Connection conn = DriverManager.getConnection(pro.getProperty("dburl"),pro);) {
				try (PreparedStatement pstmt = conn.prepareStatement("insert into request_details values(?,(select concat(firstname,'_',lastname) from users where uid=?)"
						+ ",?,(select bookname from bookbean where bid=?))");) {
					Class.forName(pro.getProperty("path"));
					pstmt.setInt(1,bId);
					pstmt.setString(2,author);

					try (ResultSet rs=pstmt.executeQuery();) {
						if(rs.next()) {
							return true;
						} else {
							return false;
						}
					}

				}
			}
		} catch (Exception e) {
			e.printStackTrace();
			//return false;
		}
		return false;
	}

	@Override
	public List<BookIssueDetails> showRequest() {
		try (FileInputStream fin = new FileInputStream("db.properties")) {

			Properties pro = new Properties();
			pro.load(fin);

			Class.forName("com.mysql.jdbc.Driver").newInstance();
			String dburl = "jdbc:mysql://localhost:3306/library_management_system";
			try (Connection conn = DriverManager.getConnection(dburl, "root", "root")) {
				String query = "select * from book_issue_details";
				try (PreparedStatement pstmt = conn.prepareStatement(query);) {

					try (ResultSet rs = pstmt.executeQuery(query);) {
						List<BookIssueDetails> beans = new LinkedList<BookIssueDetails>();
						while (rs.next()) {
							BookIssueDetails book = new BookIssueDetails();
							book.setBookId(rs.getInt("bookId"));
							book.setUserId(rs.getInt("userId"));
							book.setIssueDate(rs.getDate("issueDate"));
							book.setReturnDate(rs.getDate("returnDate"));
							beans.add(book);
						}
						return beans;
					}
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
			//return false;
		}
		return null;
	}

	@Override
	public boolean issueBook(int bId, int uId) {
		try(FileInputStream info = new FileInputStream("db.properties");){
			Properties pro = new Properties();
			pro.load(info);
			try(Connection conn = DriverManager.getConnection(pro.getProperty("dburl"),pro);) {
				try (PreparedStatement pstmt = conn.prepareStatement("insert into book_issue_details values(?,?,?,?)");) {
					Class.forName(pro.getProperty("path"));
					pstmt.setInt(1, bId);
					pstmt.setInt(2, uId);
					SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
					Calendar cal = Calendar.getInstance();
					pstmt.setDate(3, java.sql.Date.valueOf(sdf.format(cal.getTime())));
					cal.add(Calendar.DAY_OF_MONTH, 7);
					String newDate = sdf.format(cal.getTime());
					pstmt.setDate(4, java.sql.Date.valueOf(newDate));
					int count = pstmt.executeUpdate();
					if (count != 0) {
						return true;
					} else {
						return false;
					}
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
			return false;
		}
	}

	@Override
	public BookBean borrowBook(int bId) {
		try (FileInputStream fin = new FileInputStream("db.properties")) {

			Properties pro = new Properties();
			pro.load(fin);

			Class.forName("com.mysql.jdbc.Driver").newInstance();
			String dburl = "jdbc:mysql://localhost:3306/library_management_system";
			try (Connection conn = DriverManager.getConnection(dburl, "root", "root")) {
				String query = "select * from bookbean where bid=?";
				try (Statement stmt = conn.createStatement();) {

					try (ResultSet rs = stmt.executeQuery(query);) {

						if (rs.next()) {
							BookBean bean = new BookBean();
							bean.setbId(rs.getInt("bId"));
							bean.setBookName(rs.getString("bookName"));
							bean.setAuthor(rs.getString("author"));
							bean.setCategory(rs.getString("category"));
							bean.setPublisher(rs.getString("publisher"));
							return bean;
						} else {
							return null;
						}
					}
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public boolean returnBook(int bId, int uId) {
		try (FileInputStream fin = new FileInputStream("db.properties")) {

			Properties pro = new Properties();
			pro.load(fin);

			Class.forName("com.mysql.jdbc.Driver").newInstance();
			String dburl = "jdbc:mysql://localhost:3306/library_management_system";
			try (Connection conn = DriverManager.getConnection(dburl, "root", "root")) {
				String query = "delete from book_issue_details where bid=? and uid=?";
				try (PreparedStatement pstmt = conn.prepareStatement(query);) {
					pstmt.setInt(1, bId);
					pstmt.setInt(1, uId);
					int count = pstmt.executeUpdate();
					if (count != 0) {
						return true;
					} else {
						return false;
					}

				}
			}

		} catch (Exception e) {
			e.printStackTrace();
			return false;
		}
	}

	@Override
	public boolean removeBook(int bId) {
		try(FileInputStream info = new FileInputStream("db.properties");){
			Properties pro = new Properties();
			pro.load(info);
			try(Connection conn = DriverManager.getConnection(pro.getProperty("dburl"),pro);) {
				try (PreparedStatement pstmt = conn.prepareStatement("delete from bookbean where bid=?");) {
					Class.forName(pro.getProperty("path"));
					pstmt.setInt(1, bId);
					int count = pstmt.executeUpdate();
					if (count != 0) {
						return true;
					} else {
						return false;
					}
				}
			}

		} catch (Exception e) {
			e.printStackTrace();
			return false;
		}
	}

	@Override
	public List<UsersBean> showUsers() {

		try (FileInputStream fin = new FileInputStream("db.properties")) {

			Properties pro = new Properties();
			pro.load(fin);

			Class.forName("com.mysql.jdbc.Driver").newInstance();
			String dburl = "jdbc:mysql://localhost:3306/library_management_system";
			try (Connection conn = DriverManager.getConnection(dburl, "root", "root")) {
				String query = "select * from users";
				try (PreparedStatement pstmt = conn.prepareStatement(query);) {
					try (ResultSet rs = pstmt.executeQuery(query);) {
						List<UsersBean> usersList = new LinkedList<UsersBean>();
						while (rs.next()) {

							UsersBean user = new UsersBean();
							user.setuId(rs.getInt("uId"));
							user.setFirstName(rs.getString("firstName"));
							user.setLastName(rs.getString("lastName"));
							user.setEmail(rs.getString("email"));
							user.setMobile(rs.getString("mobile"));
							user.setRole(rs.getString("role"));
							usersList.add(user);
						}
						return usersList;
					}
				}
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}

	@Override
	public LinkedList<BookIssueDetails> bookHistoryDetails(int uId) {
		try(FileInputStream info = new FileInputStream("db.properties");){
			Properties pro = new Properties();
			pro.load(info);
			try(Connection conn = DriverManager.getConnection(pro.getProperty("dburl"),pro);
					PreparedStatement pstmt = conn.prepareStatement("select count(*) as uid from book_issue_details where uid=?");) {
				Class.forName(pro.getProperty("path"));
				pstmt.setInt(1, uId);
				rs=pstmt.executeQuery();
				LinkedList<BookIssueDetails> beans = new LinkedList<BookIssueDetails>();
				while(rs.next()) {
					BookIssueDetails issueDetails = new BookIssueDetails();
					issueDetails.setUserId(rs.getInt("uId"));
					beans.add(issueDetails);
				} 
				return beans;
			}
		} catch(Exception e) {
			e.printStackTrace();
			return null;
		}
	}


}
